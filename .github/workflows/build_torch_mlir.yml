name: Build

on:
  workflow_dispatch:
    branches:
      - main

jobs:

  build:
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [
          ubuntu-latest,
#          macos-latest
        ]
        arch: [ x86_64 ]
        python_version: [
          "3.10",
#          "3.11"
        ]
        exclude:
          - os: macos-latest
            python_version: 3.11

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: https://github.com/makslevental/torch-mlir.git
          ref: out_of_tree_build

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Build wheel
        run: |
          pip install wheel cmake ninja
          pip install -r requirements.txt
          LLVM_URL=$(python setup.py --llvm-url)
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            sudo apt install -y wget
            wget -O llvm.tar.xz $LLVM_URL
            tar -xvf llvm.tar.xz
            TORCH_MLIR_ENABLE_STABLEHLO=0 \
              CMAKE_PREFIX_PATH=$PWD/llvm_install \
              TORCH_MLIR_OUT_OF_TREE_BUILD=1 \
              TORCH_MLIR_ENABLE_JIT_IR_IMPORTER=0 \
              TORCH_MLIR_ENABLE_ONLY_MLIR_PYTHON_BINDINGS=1 \
              CMAKE_GENERATOR=Ninja python setup.py bdist_wheel -d wheelhouse
          else
            pip install cibuildwheel
            cibuildwheel --platform macos
          fi
          
          mkdir -p ${{ github.sha }}
          mv wheelhouse/PI*.whl ${{ github.sha }}/

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    needs: [ build ]

    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          PI_VERSION="$(python setup.py --version)"
          tag_name="$PI_VERSION"
          release_title="PI $PI_VERSION"
          echo "PI $PI_VERSION created at $(date)" > body.md
          echo "::set-output name=tag_name::${tag_name}"
          echo "::set-output name=release_title::${release_title}"

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.whl"
          bodyFile: body.md
          token: "${{ secrets.PI_CI }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          removeArtifacts: true
          allowUpdates: true
          replacesArtifacts: true
