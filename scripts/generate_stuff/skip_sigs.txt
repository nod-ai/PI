any(self: Tensor, dim: Union[str, ellipsis, None], keepdim: bool=False)
bernoulli(self: Tensor, *, generator: Optional[Generator]=None)
bitwise_and(self: Tensor, other: Number)
bitwise_and_(self: Tensor, other: Number)
bitwise_or_(self: Tensor, other: Number)
bitwise_or(self: Tensor, other: Number)
clamp_max(self: Tensor, max: Tensor)
clamp_max_(self: Tensor, max: Tensor)
clamp_min(self: Tensor, min: Tensor)
clamp_min_(self: Tensor, min: Tensor)
cumsum(self: Tensor, dim: Union[str, ellipsis, None], *, dtype: Optional[pi_dtype]=None)
expand(self: Tensor, *size: int, implicit: bool=False)
flatten(self: Tensor, start_dim: int, end_dim: int, out_dim: Union[str, ellipsis, None])
flatten(self: Tensor, start_dim: Union[str, ellipsis, None], end_dim: Union[str, ellipsis, None], out_dim: Union[str, ellipsis, None])
flatten(self: Tensor, dims: Sequence[Union[str, ellipsis, None]], out_dim: Union[str, ellipsis, None])
fmod(self: Tensor, other: Tensor)
fmod_(self: Tensor, other: Tensor)
gather(self: Tensor, dim: Union[str, ellipsis, None], index: Tensor, *, sparse_grad: bool=False)
index_select(self: Tensor, dim: Union[str, ellipsis, None], index: Tensor)
lerp(self: Tensor, end: Tensor, weight: Number)
lerp_(self: Tensor, end: Tensor, weight: Number)
log_softmax(self: Tensor, dim: Union[str, ellipsis, None], *, dtype: Optional[pi_dtype]=None)
max(self: Tensor, dim: Union[str, ellipsis, None], keepdim: bool=False)
mean(self: Tensor, dim: Sequence[Union[str, ellipsis, None]], keepdim: bool=False, *, dtype: Optional[pi_dtype]=None)
narrow(self: Tensor, dim: int, start: Tensor, length: int)
logsumexp(self: Tensor, dim: Sequence[Union[str, ellipsis, None]], keepdim: bool=False)
remainder(self: Tensor, other: Tensor)
resize_(self: Tensor, *size: int, memory_format: Optional[memory_format]=None)
view(self: Tensor, dtype: pi_dtype)
view(self: Tensor, dtype: pi_dtype)
new_empty(self: Tensor, *size: int, dtype: Optional[pi_dtype]=None, layout: Optional[layout]=None, device: Optional[Union[device, str, None]]=None, pin_memory: Optional[bool]=False, requires_grad: Optional[bool]=False)
new_ones(self: Tensor, *size: int, dtype: Optional[pi_dtype]=None, layout: Optional[layout]=None, device: Optional[Union[device, str, None]]=None, pin_memory: Optional[bool]=False, requires_grad: Optional[bool]=False)
new_zeros(self: Tensor, *size: int, dtype: Optional[pi_dtype]=None, layout: Optional[layout]=None, device: Optional[Union[device, str, None]]=None, pin_memory: Optional[bool]=False, requires_grad: Optional[bool]=False)
round(self: Tensor, *, decimals: int)
tolist(self: Tensor)
round_(self: Tensor, *, decimals: int)
type(self: Tensor, dtype: None=None, non_blocking: bool=False)
type(self: Tensor, dtype: Union[str, pi_dtype], non_blocking: bool=False)
device(a: Tensor)