name: Build

on:
  workflow_run:
    workflows: [ "Test" ]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Ninja
        uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

      - name: Ccache for C++ compilation
        uses: hendrikmuhs/ccache-action@621a41397ed83711c72862638d9ff6e63fca3041 # v1.2.3
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}-torch-mlir
          # LLVM needs serious cache size
          max-size: 6G

      - name: Install terminfo
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt -y install terminfo

      - name: Build wheels
        run: |
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            CMAKE_GENERATOR=Ninja pip wheel . -w wheelhouse -v
          else
            pip install -r requirements.txt
            cibuildwheel --platform macos
          fi
          mkdir -p ${{ github.sha }}
          mv wheelhouse/pi*.whl ${{ github.sha }}/

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    needs: [ build ]

    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          PI_VERSION="$(python setup.py --version)"
          tag_name="$PI_VERSION"
          release_title="PI $PI_VERSION"
          echo "PI $PI_VERSION created at $(date)" > body.md
          echo "tag_name=${tag_name}" | tee -a $GITHUB_OUTPUT
          echo "release_title=${release_title}" | tee -a $GITHUB_OUTPUT

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.whl"
          bodyFile: body.md
          token: "${{ secrets.PI_CI }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true